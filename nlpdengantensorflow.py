# -*- coding: utf-8 -*-
"""NLPdenganTensorflow.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1V0SZTgOsN9q-va2GiUCphI6as0XUacmS

## **PUTRI NUR AINI MAHFUDZ (M203Y0411)**

## **NLP dengan Tensorflow**

---

## Berikut ini Proyek Pertama : Membuat Model NLP dengan TensorFlow yang saya kerjakan dengan memenuhi kriteria submission yang ada.

Dataset didapatkan dari : https://www.kaggle.com/datasets/yufengdev/bbc-fulltext-and-category

## Steps:

### 1. Impor library pandas dan ubah dataset menjadi dataframe
"""

import pandas as pd
df = pd.read_csv('bbc-text.csv')

"""### 2. Panggil fungsi head() untuk menampilkan sampel teratas pada dataset"""

df.head()

"""### 3. Panggil fungsi shape untuk melihat jumlah baris dan kolom"""

df.shape

"""### 4. Lakukan one-hot-encoding dan buat dataframe baru"""

category = pd.get_dummies(df.category)
df_baru = pd.concat([df, category], axis=1)
df_baru = df_baru.drop(columns='category')
df_baru

"""### 5. Ubah nilai-nilai dari dataframe ke dalam tipe data numpy array menggunakan atribut values"""

text = df_baru['text'].values
label = df_baru[['business', 'entertainment', 'politics', 'sport', 'tech']].values

"""### 6. Lakukan pemisahan data menjadi data latih dan data testing"""

from sklearn.model_selection import train_test_split
text_latih, text_test, label_latih, label_test = train_test_split(text, label, test_size=0.2)

"""### 7. Ubah setiap kata pada dataset kita ke dalam bilangan numerik dengan fungsi Tokenizer, lalu mengonversi setiap sampel menjadi sequence"""

from tensorflow.keras.preprocessing.text import Tokenizer
from tensorflow.keras.preprocessing.sequence import pad_sequences
 
tokenizer = Tokenizer(num_words=5000, oov_token='x')
tokenizer.fit_on_texts(text_latih) 
tokenizer.fit_on_texts(text_test)
 
sekuens_latih = tokenizer.texts_to_sequences(text_latih)
sekuens_test = tokenizer.texts_to_sequences(text_test)
 
padded_latih = pad_sequences(sekuens_latih) 
padded_test = pad_sequences(sekuens_test)

"""### 8. Membangun model menggunakan model sequential"""

import tensorflow as tf
model = tf.keras.Sequential([
    tf.keras.layers.Embedding(input_dim=5000, output_dim=16),
    tf.keras.layers.LSTM(64),
    tf.keras.layers.Dense(128, activation='relu'),
    tf.keras.layers.Dense(64, activation='relu'),
    tf.keras.layers.Dense(5, activation='softmax')
])

"""### 9. Panggil fungsi compile dan tentukan optimizer serta loss function, kemudian lihat arsitektur model yang telah kita buat"""

model.compile(loss='categorical_crossentropy',optimizer='adam',metrics=['accuracy'])
model.summary()

"""### 10. Menerapkan Callback, training akan berhenti di val_accuracy > 0.85"""

class myCallback(tf.keras.callbacks.Callback):
  def on_epoch_end(self, epoch, logs={}):
    if(logs.get('val_accuracy')>0.85):
      print("STOP")
      self.model.stop_training = True

callbacks = myCallback()

"""### 11. Melatih mode dengan model.fit"""

num_epochs = 30
history = model.fit(padded_latih, label_latih, epochs=num_epochs, 
                    validation_data=(padded_test, label_test), verbose=2, callbacks=[callbacks])

"""### 12. Melihat visualisasi nilai akurasi"""

import matplotlib.pyplot as plt                                                  
acc = history.history['accuracy']                                                
val_acc = history.history['val_accuracy']                                         
loss = history.history['loss']                                                    
val_loss = history.history['val_loss']                                            

epochs = range(len(acc))                                                          

plt.plot(epochs, acc, 'r', label='Accuracy')                                                 
plt.plot(epochs, val_acc, 'b', label='Val_accuracy')                          
plt.title('Accuracy & Val_accuracy')                                        
plt.legend(loc=0)                                                                 
plt.figure()                                                                      
plt.show()

plt.plot(epochs, acc, 'r', label='Loss')                                                 
plt.plot(epochs, val_loss, 'b', label='Val_loss')                          
plt.title('Loss & Val_loss')                                        
plt.legend(loc=0)                                                                 
plt.figure()                                                                      
plt.show()

"""## **Terimakasih.**

## **Submission project kelas Belajar Pengembangan Machine Learning - 2022** 
"""